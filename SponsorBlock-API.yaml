openapi: 3.1.0
info:
  title: SponsorBlock API
  version: '1.0'
  summary: SponsorBlock APi
  license:
    name: GPL v3.0
    identifier: GPL-3.0-only
  contact:
    name: Michael Chang
    url: 'https://github.com/mchangrh'
    email: michael@mchang.name
servers:
  - url: 'https://sponsor.ajay.app/api'
    description: Production Server
paths:
  /addUserAsVIP:
    post:
      summary: Add user as VIP
      operationId: postadduserasvip
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '403':
          description: Forbidden
      security:
        - adminUserID: []
      description: |-
        Add user to VIP table.

        VIPs have extra privileges and their votes count more.
      parameters:
        - schema:
            type: string
          in: query
          name: userID
          required: true
          description: Public userID of user to add to VIP list
        - schema:
            type: boolean
          in: query
          name: enabled
          description: enable or disable user
  /skipSegments:
    get:
      summary: Get Skip Segments
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/skipSegment'
        '404':
          description: Not Found
      operationId: getskipsegments
      description: Get segments to skip for a video
      parameters:
        - $ref: '#/components/parameters/requiredVideoID'
        - $ref: '#/components/parameters/category'
        - $ref: '#/components/parameters/categories'
        - $ref: '#/components/parameters/actionType'
        - $ref: '#/components/parameters/actionTypes'
        - $ref: '#/components/parameters/requiredSegment'
        - $ref: '#/components/parameters/requiredSegments'
        - $ref: '#/components/parameters/service'
    parameters: []
    post:
      summary: ''
      operationId: postSkipSegments
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                description: Reason for rejection
        '409':
          description: Duplicate
        '429':
          description: Too Many Requests
      description: Create a segment on a video
      security:
        - userID: []
      parameters:
        - $ref: '#/components/parameters/requiredVideoID'
        - schema:
            type: string
            default: mchang-swag/1
          in: query
          name: userAgent
          description: user agent of submitter
          required: true
        - $ref: '#/components/parameters/service'
        - schema:
            type: number
            minimum: 0
            format: float
          in: query
          name: videoDuration
          description: 'duration of video, will attempt to retrieve from YT API if missing. Used to determine when a submission is out of date'
        - $ref: '#/components/parameters/actionType'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                videoID:
                  type: string
                  pattern: '^[0-9A-Za-z_-]{11}$'
                  example: dQw4w9WgXcQ
                  description: ID of video
                startTime:
                  type: number
                  format: float
                  description: start time of segment
                endTime:
                  type: number
                  format: float
                  description: end time of segment
                service:
                  $ref: '#/components/schemas/services'
                videoDuration:
                  type: number
                  format: float
                  description: 'Duration of video, will attempt to retrieve from YT API if missing. Used to determine when a submission is out of date'
                  minimum: 0
                segments:
                  type: array
                  items:
                    $ref: '#/components/schemas/submitSegment'
              required:
                - videoID
                - startTime
                - endTime
                - segments
        description: Alternative Submission format
  '/skipSegments/{sha256HashPrefix}':
    get:
      summary: Get Skip Segments (Extra Privacy)
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/hashSkipSegment'
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: getSkipSegmentsByHash
      description: Get skip segments with extra privacy
      parameters:
        - schema:
            type: string
            minLength: 4
            pattern: '[A-Fa-f0-9]'
          in: query
          name: prefix
          description: can be used instead of path
        - $ref: '#/components/parameters/category'
        - $ref: '#/components/parameters/categories'
        - $ref: '#/components/parameters/requiredSegment'
        - $ref: '#/components/parameters/requiredSegments'
        - $ref: '#/components/parameters/actionType'
        - $ref: '#/components/parameters/actionTypes'
        - $ref: '#/components/parameters/service'
    parameters:
      - schema:
          type: string
        name: sha256HashPrefix
        in: path
        description: hash of the YouTube videoID
  /voteOnSponsorTime:
    post:
      summary: Vote on Segment
      operationId: postVoteOnSponsorTime
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                description: Moderation reason
      description: ''
      parameters:
        - $ref: '#/components/parameters/UUID'
        - schema:
            type: integer
            enum:
              - 0
              - 1
              - 20
          in: query
          name: type
          description: 'Vote type - 0 for downvote, 1 for upvote, 20 to undo vote'
        - $ref: '#/components/parameters/category'
      security:
        - userID: []
  /viewedVideoSponsorTime:
    parameters: []
    post:
      summary: ''
      operationId: postViewedVideoSponsorTime
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      parameters:
        - $ref: '#/components/parameters/UUID'
      description: Add view to segment
components:
  schemas:
    skipSegment:
      type: object
      title: skipSegment
      properties:
        segment:
          type: array
          maxItems: 2
          minItems: 2
          description: start and end time in seconds
          items:
            type: integer
        UUID:
          $ref: '#/components/schemas/segmentUUID'
        category:
          $ref: '#/components/schemas/category'
        videoDuration:
          type: number
          minimum: 0
          description: Duration of video at time of submission
    segmentUUID:
      type: string
      title: segmentUUID
      pattern: '^[a-f0-9]{64,65}$'
      examples:
        - string
      format: segmentUUID
      description: UUID of segment
    publicUserID:
      type: string
      title: publicUserID
      pattern: '^[a-f0-9]{64}$'
      format: publicUserID
      description: Public userID (private userID hashed 5000 times)
    privateUserID:
      type: string
      title: privateUserID
      minLength: 32
      description: Private userID
    category:
      type: string
      enum:
        - sponsor
        - outro
        - selfpromo
        - interaction
        - intro
        - music_offtopic
        - preview
        - poi_highlight
      readOnly: true
      description: possible category types
    hashSkipSegment:
      type: array
      title: hashSkipSegment
      description: Privacy preserving skip segments
      minItems: 1
      uniqueItems: true
      items:
        type: object
        additionalProperties: false
        properties:
          videoID:
            type: string
            pattern: '^[0-9A-Za-z_-]{11}$'
          hash:
            type: string
            pattern: '^[A-Fa-f0-9]{64}$'
          segments:
            $ref: '#/components/schemas/skipSegment'
    services:
      type: string
      title: services
      enum:
        - YouTube
      default: YouTube
      description: Supported services
    submitSegment:
      title: submitSegment
      type: object
      description: Object of segemnt to submit
      properties:
        segment:
          type: array
          description: |
            start and end time in seconds
          items:
            type: number
            exclusiveMinimum: 2
            exclusiveMaximum: 2
            format: float
        category:
          $ref: '#/components/schemas/category'
        actionType:
          $ref: '#/components/schemas/actionTypes'
      required:
        - segment
        - category
    actionTypes:
      type: string
      title: actionTypes
      enum:
        - skip
        - mute
      default: skip
      description: possible action types
    UUID:
      type: string
      title: UUID
      description: Segment UUID
      pattern: '^[a-f0-9]{64,65}$'
  securitySchemes:
    userID:
      name: loremipsum
      type: apiKey
      in: query
      description: Private userID
    adminUserID:
      name: foobar
      type: apiKey
      in: query
      description: Admin's private userID
  parameters:
    videoID:
      name: videoID
      in: query
      schema:
        type: string
        pattern: '^[0-9A-Za-z_-]{11}$'
        example: dQw4w9WgXcQ
      description: ID of video
    requiredVideoID:
      name: videoID
      in: query
      schema:
        type: string
        pattern: '^[0-9A-Za-z_-]{11}$'
        example: dQw4w9WgXcQ
      description: ID of video
      required: true
    category:
      name: category
      in: query
      schema:
        type: string
        enum:
          - sponsor
          - selfpromo
          - interaction
          - intro
          - outro
          - preview
          - poi_highlight
          - music_offtopic
        default: sponsor
      description: Segment Category
    categories:
      name: categories
      in: query
      required: false
      schema:
        type: array
        minItems: 1
        default: sponsor
        enum:
          - sponsor
          - selfpromo
          - interaction
          - intro
          - outro
          - preview
          - music_offtopic
          - poi_highlight
        behavior: Read/Write
        uniqueItems: true
      style: spaceDelimited
      description: Array of categories
    actionType:
      name: actionType
      in: query
      schema:
        type: string
        enum:
          - skip
          - mute
        default: skip
      description: Action type
    actionTypes:
      name: actionTypes
      in: query
      schema:
        type: array
        enum:
          - skip
          - mute
        default: skip
        uniqueItems: true
        minItems: 1
      style: spaceDelimited
      description: multiple action types
    requiredSegment:
      name: requiredSegment
      in: query
      required: false
      schema:
        type: string
        pattern: '^([a-f0-9]{64,65}$'
      description: Segment UUID to get regardless of votes
    requiredSegments:
      name: requiredSegments
      in: query
      required: false
      schema:
        type: array
        minItems: 1
        uniqueItems: true
      description: Segment UUIDs to get regardless
    service:
      name: service
      in: query
      required: false
      schema:
        type: string
        enum:
          - YouTube
        default: YouTube
      description: Service for segments
    UUID:
      name: UUID
      in: query
      schema:
        type: string
        pattern: '^[a-f0-9]{64,65}$'
      description: UUID of target segment
      required: true
  responses: {}
